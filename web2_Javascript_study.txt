- html에 javascript가 시작됨을 알려주어야한다.
-> 웹브라우저는 <script></script> 안의 코드를 javascript로 해석한다.
-> 웹페이지에 글씨를 출력할때는 document.write()를 사용한다.

* javascript와 html의 차이
- <h1> JavaScript </h1>
<script>
  document.write('hello world');
</script>
- <h1>html</h1>
helloworld

-> <h1>JavaScript</h1>
<script>
  document.write(1+1);
</script>
-> <h1>html</h1>
1+1
: javascript는 동적으로 1과 1을 더한 결과를 2로 만든 다음에 화면에 출력한다. 하지만 html은 정적이다.

- 버튼 넣기 : <input type="button" value="hi" onclick="alert('hi')">
-> html문서
: onclick의 속성 값으로는 javascript가 와야한다.
: onclick의 속성값은 웹브라우저가 기억하고 있다가 onclick 속성이 위치하고 있는 태그(버튼)에 사용자가 클릭했을때, 기억하고 있던 js코드를 js문법에 따라 해석해서 거기 적혀있는대로 웹브라우저가 동작한다.
* 웹브라우저 위에서 일어나는 것 = 사건(event)
: 어떤 이벤트가 일어났을 떄, 어떠한 js가 실행되도록 하는 것이 onclick이다.
-> 웹브라우저 위에서 일어날 수 있는 event
: onclick, onchange, onkeydown 등(10~20개 정도 정의되어있음)
: 이 이벤트를 이용해서 사용자와 상호작용하는 엡페이지, 웹사이트를 만들 수 있다.

- 마우스우클릭>검사>Console : 파일을 만들지 않고도 javascript 코드를 즉석에서 사용할 수 있다.
-> 데이터를 처리해야되는 경우가 많다. 그런 경우 console창을 열고 바로 처리할 수 있다.
ex) 글자의 개수 세기
-> 복사한 글들을 따옴표로 묶어주면 문자열이 된다. javascript에는 문자열의 문자의 개수를 알려주는 명령어 length이 있다.
-> alert('~~~'.length)

* console에서 실행시키는 javascript는 웹페이지를 대상으로 실행되게 된다.
- 마우스우클릭>검사>elements에서 esc키를 누르면 console창이 밑에 동시에 뜬다. 여기에 입력해서 js코드를 실행할 수 있다.
- 이미 만들어져 있는 웹사이트를 나의 필요에 따라 맥락적으로 간단하면서도 나에게 딱맞는 코드를 작성해서 문제를 해결할 수 있다.
-> 나의 현실의 문제를 쉽게 해결할 수 있다.

- js 데이터타입(자료형)
: boolean, null, undefined, number, string, symbol
- number(숫자)
 -> 산술연산자(+, -, *, /)
- string(문자열)
 -> "", '' 안에 표현
 -> .length : 문자열의 길이
 -> .toUpperCase() : 대문자로 바꿔주는 method
 -> .indexOf('O') : 찾고자 하는 문자의 index
    .indexOf('helloworld') : 찾고자 하는 문자열의 시작 index
 -> .trim() : 공백 삭제
 ...
 * 문자열이냐 숫자냐에 따라 연산이 달라지기 때문에, 데이터타입을 정확하게 표현해야한다.

- CSS 기능: style태그 -> ctrl+f : 찾아서 replace all 가능
- .은 클래스를 의미, #은 id를 의미
- 클래스는 무언가를 그루핑한다. id는 한가지 대상을 식별한다. 를 의미한다. (클래스=반, id=학번)
-> 즉, class위에 id를 얹어 디자인하는게 효율적이므로, 우선순위를 그렇게 정했다. (우선순위가 id가 높다.)
-> .도, #도 안붙이면 그냥 태그
* CSS에서 가장 중요한 문법 중 하나 = 선택자
: 어떤 속성을 누구에게 적용할 것인지 타겟팅하는 것은 중요하다.
: 태그 < class < id

- 사용자와 상호작용하여 css를 javascript를 이용하여 동적으로 적용가능
- html, javascript = 컴퓨터언어
- javascript = 컴퓨터프로그래밍언어
- program = 순서
-> programming = 순서를 만드는 행위
* 의도에 따라 순서대로 여러기능을 작동시키는 것이 컴퓨터를 조작하는 방법.
-> 시간의 순서에 따라 실행되어야할 기능을 프로그래밍언어의 문법에 맞게 글로 적어두는 방식을 고안.
- 프로그램의 본질적인 의미
- html: 웹페이지를 묘사하는 목적의 언어
-> 시간의 순서에 따라 무엇을 할필요없다.
- javascript: 사용자와 상호작용하기 위해 고안된 컴퓨터프로그래밍언어 -> 시간순서에 따라 웹브라우저의 여러 기능이 실행되어야 한다. = programming
- 시간을 배치하는 것에 더해, 조건에 따라 다른 순서의 기능을 실행하거나 반복해서 어떤 기능이 실행되도록 하고 싶어졌다.
코드가 복잡해짐에 따라, 복잡해진 순서를 단순하게 잘 정리하는 방법도 고안되기 시작했다.

- 조건문 : 하나의 프로그램이 하나의 흐름으로 가는 것이 아니라 조건에 따라서 다른 순서의 기능이 실행되도록 하는 것
-> 토글(toggle) 생성

- 리팩토링(refactoring) : 공장으로 다시 보내서 개선한다.
비효율적인 코드에 대해서 동작하는 것은 그대로 두고 효율적으로 만들어 가독성을 높이고, 유지보수가 편하도록 하고, 중복된 코드를 낮추고 하는 방향으로 개선하는 작업.
-> 소프트웨어가 커지고 복잡하지는 과정에서 틈틈히 리팩토링해야한다.
- onclick과 같은 이벤트 안에서 실행되는 코드들은 해당 태그를 가리키도록 약속되어있는 특수한 키워드 존재 = this
: 자기 자신을 가리킨다. 인덱스 태그를 참조하는 것은 this로 하면 되기 때문에 id값은 필요없다.
-> 코드가 간결해진다.
+) 중복된 코드 제거 : 변수 이용 ex) var target

- 배열과 반복문을 활용하면 더 간편하게 코드를 작성할 수 있다.
- 함수는 리팩토링에서 중요한 역할 중 하나를 차지한다.
 -> self에 매개변수 this를 전달해서 함수를 동작시킨다.
 : 함수 하나를 통해 한번에 모든 것을 변경할 수 있는 장점이 있다.
- 객체 : 함수 기반위에 존재
 -> 코드를 정리하기 위해 함수를 사용하는데, 함수뿐만아니라 함수와 연관되어있는 변수들이 많아지면 복잡도의 한계가 발생한다.
 -> 연관된 함수와 연관된 변수를 같은 이름으로 그룹핑해서 잘 정리정돈하기 위한 도구로 객체를 사용한다.
 * 이미 있는 함수인지 확인이 어려울 경우, 중복되는 함수 이름에 해당하는 코드들에 대해 덮어쓰기가 되므로 문제가 발생한다.

- 배열은 대괄호([]), 객체는 중괄호({}) 사용
- 객체의 key = 갖고오고 싶은 정보에 도달할 수 있는 열쇠
 -> 배열에서는 순서대로 정리되어있기 때문에 index라는 표현을 사용한다.
* 해당 함수가 소속된 객체를 가리키는 약속된 기호 = this
* 객체에 소속된 변수의 값으로 함수를 지정할 수 있다.
= 객체에 소속된 함수를 만들 수 있다.
= 메소드
* 객체에 소속된 변수 = 프로퍼티(property)

- 객체는 객체의 프로퍼티와 프로퍼티를 구분할 때 콤마를 찍는다.

- 서로 연관된 코드들을 파일로 묶어 그룹핑해서 정리정돈하기
 -> colors.js라는 파일만 변경해도 모든 파일에 적용이 가능하다.
 -> 가독성, 명확성 - 코드의 의미를 파일의 이름을 통해서도 확인 가능
 * 한번 웹페이지에, 웹브라우저에 다운로드된 파일은 웹브라우저가 컴퓨터에 저장해두었다가 다음에 접속할 때, 저장된 파일을 읽어서 네트워크를 통하지 않게 한다.
  -> 서버입장에서 비용절감. 사용자입장에서 네트워크 트래픽절감, 웹페이지에 빠르게 표시 가능.
  -> 파일로 쪼개는 것이 훨씬 효율적이고 돈도 시간도 적게 든다.

- 누군가가 만들어낸 소프트웨어 위에서 소프트웨어를 만들고, 다른 사람들이 만들어놓은 것을 조립해서 만들어 내는 것이 오늘날 소프트웨어를 만들어내는 것이 기본이다.
-> 생산자로서의 소비자 = 소프트웨어의 사회성
: libary = 내가 만들고자하는 프로그램에 필요한 부품이 되는 소프트웨어를 잘 정리해놓은, 재사용하기 쉽도록 되어있는 소프트웨어
: framework = 만들고자하는 것이 있을때, 만들고자하는 것이 무엇이냐에 따라(게임, 웹, 채팅 등) 언제나 필요한 공통적인 것이 있고, 기획의도에 따라 달라지는 부분이 있다. 여기서 공통적인 부분을 프레임워크가 만들어 놓고, 우리는 만들고자하는 것의 기능, 개성에 따라 달라지는 부분만 살짝 수정함으로써 만들고자하는 것을 처음부터 끝까지 만들지 않도록 해주는 거의 반제품의 상태
* library는 소프트웨어를 만드는 내가 라이브러리를 당겨와서 쓰는 느낌인 반면, framework은 우리가 그 안에 들어가서 작업하는 느낌이 있다.
-> 어쨌든 둘다 다른 사람과 협력하는 모델.
  (다른사람의 도움을 받아 소프트웨어를 만든다는 의미)

- javascript에서 가장 유명한 library는 jQuery
: 직접 코딩하는 것보다 생산성이 높아진다.
- CDN(Content Delivery Network)을 통해 자기들의 서버에 파일을 보관해놓고 우리는 script src를 통해 가져갈 수 있다. 사용료도 자기들이 대준다.
 -> 구글에서 제공한 jQuery 라이브러리의 주소이용하면 다운로드할 필요없다.

- jQuery를 이용하면 반복문을 사용하지 않아도된다.
* ctrl + / 하면 여러줄 주석처리 가능
- $('a') : 웹페이지의 모든 a 태그를 jQuery로 제어하겠다는 의미
- jQuery는 새로운 언어가 아니고, javascript를 이용해서 우리 대신에 css라는 함수를 jQuery가 만들어준 것이다.(내부적으로 해당 작업을 대신 처리)
 -> 직관적
 * 많은 라이브러리들에 대해 알 수록 다양한 작업을 할 수 있다.
 * 파일로 로직을 쪼갰을때, 자기가 프로그램을 짤때도 도움이 되지만, 다른사람이 짠 것을 내 프로젝트로 가져오는 데에도 중요한 역할을 한다.
